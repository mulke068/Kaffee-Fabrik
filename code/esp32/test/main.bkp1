#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_INA219.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

// Pin definitions
#define SDA_PIN 17
#define SCL_PIN 18
#define PCA9555_ADDR 0x20
#define TMP102_IC20_ADDR 0x48
#define TMP102_IC20_ALERT 1
#define TMP102_IC8_ADDR 0x49
#define TMP102_IC8_ALERT 2

// Motor control pins
const uint8_t PWMA_1 = 4;
const uint8_t PWMB_1 = 5;
const uint8_t PWMA_2 = 6;
const uint8_t PWMB_2 = 7;

const uint8_t AIN1_1 = 16;
const uint8_t AIN2_1 = 15;
const uint8_t BIN1_1 = 8;
const uint8_t BIN2_1 = 9;

const uint8_t AIN1_2 = 11;
const uint8_t AIN2_2 = 10;
const uint8_t BIN1_2 = 13;
const uint8_t BIN2_2 = 14;

const uint8_t STBY = 19;
const uint8_t BUTTON_PIN = 0;
const uint8_t LED_17 = 48;
const uint8_t LED_18 = 47;

// Globals for sensors and LED state
Adafruit_INA219 ina219(0x40);
byte port0State = 0b00000000;
byte port1State = 0b00000000;
bool sensorReadingEnabled = false;
bool autoUpdateEnabled = true;
unsigned long sensorInterval = 5000;  // Default 5 seconds

// LED pattern definitions for PCA9555
byte led1 = 0b00000001;
byte led2 = 0b00000010;
byte led3 = 0b00000100;
byte led4 = 0b00001000;
byte led5 = 0b00010000;
byte led6 = 0b00100000;
byte led7 = 0b00100000;  // Port 1 mapping (LEDs 7-12)
byte led8 = 0b00010000;
byte led9 = 0b00001000;
byte led10 = 0b00000100;
byte led11 = 0b00000010;
byte led12 = 0b00000001;

// Motor direction enum
enum MotorDirection {
  STOP = 0,
  FORWARD = 1,
  BACKWARD = 2
};

// Motor class definition
class Motor {
private:
  uint8_t enPin;
  uint8_t in1Pin;
  uint8_t in2Pin;
  int currentSpeed = 0;
  int targetSpeed = 0;
  int rampStep = 5;
  bool isRunning = false;
  MotorDirection direction = STOP;

public:
  Motor(uint8_t enablePin, uint8_t in1, uint8_t in2)
    : enPin(enablePin), in1Pin(in1), in2Pin(in2) {}

  void begin() {
    pinMode(enPin, OUTPUT);
    pinMode(in1Pin, OUTPUT);
    pinMode(in2Pin, OUTPUT);
    stop();
  }

  void setDirection(MotorDirection dir) {
    if (direction != dir) {
        direction = dir;
        updateSpeed();
        updatePins();
    }
  }

  void setSpeed(int speed, bool immediate = false) {
    speed = constrain(map(speed, 0, 100, 0, 255), 0, 255);
    targetSpeed = speed;
    if (immediate) {
      currentSpeed = targetSpeed;
      updateSpeed();
    }
  }

  void update() {
    if (currentSpeed != targetSpeed) {
      int step = rampStep;
      if (abs(targetSpeed - currentSpeed) < rampStep) {
        step = abs(targetSpeed - currentSpeed);
      }
      currentSpeed += (targetSpeed > currentSpeed) ? step : -step;
      updateSpeed();
    }
  }

  void stop() {
    setDirection(STOP);
    setSpeed(0, true);
  }

  bool isActive() const {
    return isRunning;
  }

  int getSpeed() const {
    return map(currentSpeed, 0, 255, 0, 100);
  }

  MotorDirection getDirection() const {
    return direction;
  }

private:
  void updatePins() {
    switch (direction) {
      case FORWARD:
        digitalWrite(in1Pin, HIGH);
        digitalWrite(in2Pin, LOW);
        break;
      case BACKWARD:
        digitalWrite(in1Pin, LOW);
        digitalWrite(in2Pin, HIGH);
        break;
      default:
        digitalWrite(in1Pin, LOW);
        digitalWrite(in2Pin, LOW);
    }
    isRunning = (direction != STOP);
  }

  void updateSpeed() {
    analogWrite(enPin, currentSpeed);
  }
};

// Create motor instances
Motor motor1(PWMA_1, AIN1_1, AIN2_1);
Motor motor2(PWMB_1, BIN1_1, BIN2_1);
Motor motor3(PWMA_2, AIN1_2, AIN2_2);
Motor motor4(PWMB_2, BIN1_2, BIN2_2);

// Function prototypes
void initINA219();
void initTMP102();
void initPCA9555();
void initMotors();
void readINA219();
void readTMP102();
void setLeds(byte port0, byte port1);
void runLedPattern(int patternNum);
void processCommand(String command);
void printHelp();
void printStatus();

// ----- RTOS Task Definitions -----

// MotorTask: Updates motors frequently for smooth ramping
void MotorTask(void *pvParameters) {
  (void)pvParameters;
  while (1) {
    motor1.update();
    motor2.update();
    motor3.update();
    motor4.update();
    vTaskDelay(pdMS_TO_TICKS(50));
  }
}

// SensorTask: Performs auto sensor readings when enabled
void SensorTask(void *pvParameters) {
  (void)pvParameters;
  while (1) {
    if (sensorReadingEnabled && autoUpdateEnabled) {
      readINA219();
      readTMP102();
      vTaskDelay(pdMS_TO_TICKS(sensorInterval));
    } else {
      vTaskDelay(pdMS_TO_TICKS(200));
    }
  }
}

// SerialTask: Processes incoming serial commands
void SerialTask(void *pvParameters) {
  (void)pvParameters;
  while (1) {
    if (Serial.available()) {
      String command = Serial.readStringUntil('\n');
      command.trim();
      if (command.length() > 0) {
        processCommand(command);
      }
    }
    vTaskDelay(pdMS_TO_TICKS(10));
  }
}

// LedTask: Monitors the button and runs LED patterns accordingly
void LedTask(void *pvParameters) {
  (void)pvParameters;
  while (1) {
    if (!digitalRead(BUTTON_PIN)) {
      runLedPattern(1);
    }
    vTaskDelay(pdMS_TO_TICKS(50));
  }
}

// ----- Setup and RTOS Task Creation -----
void setup() {
  Serial.begin(115200);
  delay(1000);
  Wire.begin(SDA_PIN, SCL_PIN);

  // Initialize all components
  initINA219();
  initTMP102();
  initPCA9555();
  initMotors();

  // Set up button and LEDs
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(LED_17, OUTPUT);
  pinMode(LED_18, OUTPUT);
  digitalWrite(LED_17, HIGH);
  digitalWrite(LED_18, HIGH);

  Serial.println("\n===== Integrated System Controller (RTOS) =====");
  Serial.println("Type 'HELP' for available commands");
  printHelp();

  // Create RTOS tasks
  xTaskCreate(MotorTask, "MotorTask", 2048, NULL, 2, NULL);
  xTaskCreate(SensorTask, "SensorTask", 2048, NULL, 2, NULL);
  xTaskCreate(SerialTask, "SerialTask", 4096, NULL, 2, NULL);
  xTaskCreate(LedTask, "LedTask", 2048, NULL, 2, NULL);
}

void loop() {
  // Delete the default loop task as all work is done in FreeRTOS tasks
  vTaskDelete(NULL);
}

// ----- Component Initialization and Function Definitions -----
void initINA219() {
  if (!ina219.begin()) {
    Serial.println("Failed to find INA219 chip");
  } else {
    Serial.println("INA219 initialized successfully");
  }
}

void initTMP102() {
  pinMode(TMP102_IC20_ALERT, INPUT_PULLUP);
  pinMode(TMP102_IC8_ALERT, INPUT_PULLUP);

  // Motor Driver sensor: Set T_HIGH (70°C) and T_LOW (0°C)
  Wire.beginTransmission(TMP102_IC20_ADDR);
  Wire.write(0x03);
  Wire.write(0x46);
  Wire.write(0x00);
  Wire.endTransmission();
  Wire.beginTransmission(TMP102_IC20_ADDR);
  Wire.write(0x02);
  Wire.write(0x00);
  Wire.write(0x00);
  Wire.endTransmission();

  // Power Unit sensor: Set T_HIGH (60°C) and T_LOW (5°C)
  Wire.beginTransmission(TMP102_IC8_ADDR);
  Wire.write(0x03);
  Wire.write(0x3C);
  Wire.write(0x00);
  Wire.endTransmission();
  Wire.beginTransmission(TMP102_IC8_ADDR);
  Wire.write(0x02);
  Wire.write(0x08);
  Wire.write(0x00);
  Wire.endTransmission();

  Serial.println("TMP102 sensors initialized");
}

void initPCA9555() {
  // Configure PCA9555 ports as outputs
  Wire.beginTransmission(PCA9555_ADDR);
  Wire.write(0b00000110);
  Wire.write(0b00000000);
  Wire.endTransmission();
  Wire.beginTransmission(PCA9555_ADDR);
  Wire.write(0b00000111);
  Wire.write(0b00000000);
  Wire.endTransmission();

  setLeds(0, 0);
  Serial.println("PCA9555 initialized");
}

void initMotors() {
  const uint8_t controlPins[] = {
    PWMA_1, PWMB_1, PWMA_2, PWMB_2,
    AIN1_1, AIN2_1, BIN1_1, BIN2_1,
    AIN1_2, AIN2_2, BIN1_2, BIN2_2,
    STBY
  };
  for (uint8_t pin : controlPins) {
    pinMode(pin, OUTPUT);
    digitalWrite(pin, LOW);
  }

  motor1.begin();
  motor2.begin();
  motor3.begin();
  motor4.begin();

  digitalWrite(STBY, HIGH);
  Serial.println("Motors initialized");
}

void readINA219() {
  float shuntvoltage = ina219.getShuntVoltage_mV();
  float busvoltage = ina219.getBusVoltage_V();
  float current_mA = ina219.getCurrent_mA();
  float power_mW = ina219.getPower_mW();
  float loadvoltage = busvoltage + (shuntvoltage / 1000);

  Serial.println("===== Power Readings =====");
  Serial.print("Bus Voltage:   ");
  Serial.print(busvoltage);
  Serial.println(" V");
  Serial.print("Shunt Voltage: ");
  Serial.print(shuntvoltage);
  Serial.println(" mV");
  Serial.print("Load Voltage:  ");
  Serial.print(loadvoltage);
  Serial.println(" V");
  Serial.print("Current:       ");
  Serial.print(current_mA);
  Serial.println(" mA");
  Serial.print("Power:         ");
  Serial.print(power_mW);
  Serial.println(" mW");
}

void readTMP102() {
  // Motor Driver sensor
  Wire.beginTransmission(TMP102_IC20_ADDR);
  Wire.write(0x00);
  Wire.endTransmission();
  Wire.requestFrom(TMP102_IC20_ADDR, 2);

  Serial.println("===== Temperature Readings =====");
  if (Wire.available() == 2) {
    byte msb = Wire.read();
    byte lsb = Wire.read();
    int temperature = ((msb << 8) | lsb) >> 4;
    float tempC = temperature * 0.0625;
    Serial.print("Motor Driver Temp: ");
    Serial.print(tempC);
    Serial.print("°C (Alert: ");
    Serial.print(digitalRead(TMP102_IC20_ALERT) ? "No" : "YES");
    Serial.println(")");
  }

  // Power Unit sensor
  Wire.beginTransmission(TMP102_IC8_ADDR);
  Wire.write(0x00);
  Wire.endTransmission();
  Wire.requestFrom(TMP102_IC8_ADDR, 2);
  if (Wire.available() == 2) {
    byte msb = Wire.read();
    byte lsb = Wire.read();
    int temperature = ((msb << 8) | lsb) >> 4;
    float tempC = temperature * 0.0625;
    Serial.print("Power Unit Temp:   ");
    Serial.print(tempC);
    Serial.print("°C (Alert: ");
    Serial.print(digitalRead(TMP102_IC8_ALERT) ? "No" : "YES");
    Serial.println(")");
  }
}

void setLeds(byte newPort0, byte newPort1) {
  port0State = newPort0;
  port1State = newPort1;

  Wire.beginTransmission(PCA9555_ADDR);
  Wire.write(0b00000010);
  Wire.write(~port0State);
  Wire.endTransmission();

  Wire.beginTransmission(PCA9555_ADDR);
  Wire.write(0b00000011);
  Wire.write(~port1State);
  Wire.endTransmission();
}

void runLedPattern(int patternNum) {
  switch (patternNum) {
    case 1:  // Basic pattern
      setLeds(led1 | led4, led10 | led7);
      vTaskDelay(pdMS_TO_TICKS(1000));
      setLeds(led2 | led5, led11 | led8);
      vTaskDelay(pdMS_TO_TICKS(1000));
      setLeds(led3 | led6, led9 | led12);
      vTaskDelay(pdMS_TO_TICKS(1000));
      setLeds(0, 0);
      break;

    case 2:  // Sequential pattern
      for (int i = 0; i < 6; i++) {
        setLeds(1 << i, 0);
        vTaskDelay(pdMS_TO_TICKS(300));
      }
      for (int i = 0; i < 6; i++) {
        setLeds(0, 1 << i);
        vTaskDelay(pdMS_TO_TICKS(300));
      }
      setLeds(0, 0);
      break;

    case 3:  // All on then off
      setLeds(0xFF, 0xFF);
      vTaskDelay(pdMS_TO_TICKS(1000));
      setLeds(0, 0);
      break;

    default:
      break;
  }
}

void processCommand(String command) {
  command.toUpperCase();
  String parts[4];
  int count = 0;
  int lastIndex = 0;
  for (int i = 0; i < command.length() && count < 4; i++) {
    if (command[i] == ':') {
      parts[count++] = command.substring(lastIndex, i);
      lastIndex = i + 1;
    }
  }
  if (lastIndex < command.length()) {
    parts[count++] = command.substring(lastIndex);
  }

  // Motor commands
  if (parts[0] == "M1" || parts[0] == "M2" || parts[0] == "M3" || parts[0] == "M4") {
    Motor *targetMotor = nullptr;
    if (parts[0] == "M1") targetMotor = &motor1;
    else if (parts[0] == "M2") targetMotor = &motor2;
    else if (parts[0] == "M3") targetMotor = &motor3;
    else if (parts[0] == "M4") targetMotor = &motor4;

    if (targetMotor != nullptr) {
      if (parts[1] == "RL" || parts[1] == "FWD") {
        targetMotor->setDirection(FORWARD);
        if (count > 2 && parts[2].length() > 0)
          targetMotor->setSpeed(parts[2].toInt());
        Serial.println(parts[0] + " set to FORWARD at speed " + String(targetMotor->getSpeed()) + "%");
      } else if (parts[1] == "LL" || parts[1] == "REV" || parts[1] == "BWD") {
        targetMotor->setDirection(BACKWARD);
        if (count > 2 && parts[2].length() > 0)
          targetMotor->setSpeed(parts[2].toInt());
        Serial.println(parts[0] + " set to BACKWARD at speed " + String(targetMotor->getSpeed()) + "%");
      } else if (parts[1] == "STOP") {
        targetMotor->stop();
        Serial.println(parts[0] + " stopped");
      } else if (parts[1] == "SPD") {
        if (count > 2) {
          targetMotor->setSpeed(parts[2].toInt());
          Serial.println(parts[0] + " speed set to " + parts[2] + "%");
        }
      } else if (parts[1] == "STATUS") {
        String dirStr = "STOPPED";
        if (targetMotor->getDirection() == FORWARD) dirStr = "FORWARD";
        else if (targetMotor->getDirection() == BACKWARD) dirStr = "BACKWARD";
        Serial.println(parts[0] + " status: Direction=" + dirStr + ", Speed=" + String(targetMotor->getSpeed()) + "%");
      }
    }
    return;
  }

  // LED commands
  if (parts[0] == "LED") {
    if (parts[1] == "ALL") {
      if (parts[2] == "ON") {
        setLeds(0xFF, 0xFF);
        digitalWrite(LED_17, LOW);
        digitalWrite(LED_18, LOW);
        Serial.println("All LEDs turned ON");
      } else if (parts[2] == "OFF") {
        setLeds(0, 0);
        digitalWrite(LED_17, HIGH);
        digitalWrite(LED_18, HIGH);
        Serial.println("All LEDs turned OFF");
      }
    } else if (parts[1] == "PATTERN") {
      int patternNum = parts[2].toInt();
      Serial.println("Running LED pattern " + String(patternNum));
      runLedPattern(patternNum);
    } else {
      int ledNum = parts[1].toInt();
      if (ledNum >= 1 && ledNum <= 12) {
        byte ledMask;
        byte *portState;
        if (ledNum <= 6) {
          ledMask = 1 << (ledNum - 1);
          portState = &port0State;
        } else {
          ledMask = 1 << (12 - ledNum);
          portState = &port1State;
        }
        if (parts[2] == "ON") {
          *portState |= ledMask;
          Serial.println("LED " + String(ledNum) + " turned ON");
        } else if (parts[2] == "OFF") {
          *portState &= ~ledMask;
          Serial.println("LED " + String(ledNum) + " turned OFF");
        } else if (parts[2] == "TOGGLE") {
          *portState ^= ledMask;
          Serial.println("LED " + String(ledNum) + " toggled");
        }
        setLeds(port0State, port1State);
      } else if (ledNum >= 17 && ledNum <= 18) {
        if (parts[2] == "ON") {
          if (ledNum == 17) {
            digitalWrite(LED_17, LOW);  // Assuming active-low configuration
          } else if (ledNum == 18) {
            digitalWrite(LED_18, LOW);
          }
        } else if (parts[2] == "OFF") {
          if (ledNum == 17) {
            digitalWrite(LED_17, HIGH);
          } else if (ledNum == 18) {
            digitalWrite(LED_18, HIGH);
          }
        }
      }
    }
    return;
  }

  // Sensor commands
  if (parts[0] == "SENSOR") {
    if (parts[1] == "READ") {
      if (parts[2] == "ALL" || parts[2] == "") {
        readINA219();
        readTMP102();
      } else if (parts[2] == "POWER") {
        readINA219();
      } else if (parts[2] == "TEMP") {
        readTMP102();
      }
    } else if (parts[1] == "AUTO") {
      if (parts[2] == "ON") {
        sensorReadingEnabled = true;
        if (count > 3) {
          sensorInterval = parts[3].toInt() * 1000;
        }
        Serial.println("Auto sensor readings enabled every " + String(sensorInterval / 1000) + " seconds");
      } else if (parts[2] == "OFF") {
        sensorReadingEnabled = false;
        Serial.println("Auto sensor readings disabled");
      }
    }
    return;
  }

  // System commands
  if (command == "STOP" || command == "EMERGENCY") {
    motor1.stop();
    motor2.stop();
    motor3.stop();
    motor4.stop();
    setLeds(0, 0);
    Serial.println("EMERGENCY STOP: All motors stopped, all LEDs off");
    return;
  }

  if (command == "STATUS") {
    printStatus();
    return;
  }

  if (command == "HELP") {
    printHelp();
    return;
  }

  Serial.println("Unknown command: " + command);
  Serial.println("Type HELP for available commands");
}

void printHelp() {
  Serial.println("\n===== Available Commands =====");
  Serial.println("MOTOR CONTROL:");
  Serial.println("  Mx:FWD:y    - Set motor x forward at y% speed (x=1-4, y=0-100)");
  Serial.println("  Mx:BWD:y    - Set motor x backward at y% speed");
  Serial.println("  Mx:STOP     - Stop motor x");
  Serial.println("  Mx:SPD:y    - Set motor x speed to y%");
  Serial.println("  Mx:STATUS   - Get motor x status");

  Serial.println("\nLED CONTROL:");
  Serial.println("  LED:ALL:ON   - Turn on all LEDs");
  Serial.println("  LED:ALL:OFF  - Turn off all LEDs");
  Serial.println("  LED:n:ON     - Turn on LED n (n=1-12)");
  Serial.println("  LED:n:OFF    - Turn off LED n");
  Serial.println("  LED:n:TOGGLE - Toggle LED n");
  Serial.println("  LED:PATTERN:n - Run LED pattern n (n=1-3)");

  Serial.println("\nSENSOR COMMANDS:");
  Serial.println("  SENSOR:READ:ALL  - Read all sensors");
  Serial.println("  SENSOR:READ:POWER - Read power sensor (INA219)");
  Serial.println("  SENSOR:READ:TEMP - Read temperature sensors (TMP102)");
  Serial.println("  SENSOR:AUTO:ON:n - Enable auto sensor readings every n seconds");
  Serial.println("  SENSOR:AUTO:OFF  - Disable auto sensor readings");

  Serial.println("\nSYSTEM COMMANDS:");
  Serial.println("  STATUS      - Print system status");
  Serial.println("  STOP        - Emergency stop (all motors and LEDs off)");
  Serial.println("  HELP        - Show this help message");
}

void printStatus() {
  Serial.println("\n===== System Status =====");
  Serial.println("MOTORS:");
  for (int i = 1; i <= 4; i++) {
    Motor *m;
    switch (i) {
      case 1: m = &motor1; break;
      case 2: m = &motor2; break;
      case 3: m = &motor3; break;
      case 4: m = &motor4; break;
    }
    String dirStr = "STOPPED";
    if (m->getDirection() == FORWARD) dirStr = "FORWARD";
    else if (m->getDirection() == BACKWARD) dirStr = "BACKWARD";
    Serial.println("  M" + String(i) + ": " + dirStr + " at " + String(m->getSpeed()) + "%");
  }
  Serial.println("LEDs:");
  Serial.println("  Port 0: 0b" + String(port0State, BIN));
  Serial.println("  Port 1: 0b" + String(port1State, BIN));
  Serial.println("TEMPERATURE ALERTS:");
  Serial.println("  Motor Driver: " + String(digitalRead(TMP102_IC20_ALERT) ? "Normal" : "ALERT!"));
  Serial.println("  Power Unit: " + String(digitalRead(TMP102_IC8_ALERT) ? "Normal" : "ALERT!"));
  Serial.println("AUTO SENSOR READINGS: " + String(sensorReadingEnabled ? "Enabled" : "Disabled"));
  if (sensorReadingEnabled) {
    Serial.println("  Interval: " + String(sensorInterval / 1000) + " seconds");
  }
  readINA219();
  readTMP102();
}